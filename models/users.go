package models

import (
  "errors"
  "github.com/jinzhu/gorm"
  _ "github.com/jinzhu/gorm/dialects/postgres"
)

var (
  // ErrNotFound is returned when a resource cannot be found in teh database
  ErrNotFound = errors.New("models: resource not found")

  // ErrInvalidID is returned when an invalid ID is provided
  // to a method like Delete.
  ErrInvalidID = errors.New("models: ID provided was invalid")
)

type User struct {
  gorm.Model
  Name  string
  Email string `gorm:"not null;unique_index"`
}

type UserService struct {
  db *gorm.DB
}

// NewUserService opens the connection to the Users table and returns a
// UserService struct with the open gorm db
func NewUserService(connectionInfo string) (*UserService, error) {
  db, err := gorm.Open("postgres", connectionInfo)
  if err != nil {
    return nil, err
  }

  db.LogMode(true)
  return &UserService{
    db: db,
  }, nil
}

func (us *UserService) Close() error {
  return us.db.Close()
}

// Create will create the provided user and backfill data like the ID,
// CreatedAt, and UpdatedAt fields.
func (us *UserService) Create(user *User) error {
  return us.db.Create(user).Error
}

// first will query using the provided gorm.DB and it will get the first item
// returned and place it into the dst. If nothing is found
// in the query it will return ErrNotFound
func first(db *gorm.DB, dst interface{}) error {
  err := db.First(dst).Error
  if err == gorm.ErrRecordNotFound {
    return ErrNotFound
  }
  return err
}

// ByID will look up a user with the provided ID.
// If the user is found, we will return a nil error
// If the user is not found, we will return ErrNotFound
// If there is another error, we will return an error with more information
// about what went wrong. This may not be an error generated by the models package.
//
// As a general rule, any error but ErrNotFound should probably
// result in a 500 error.
func (us *UserService) ByID(id uint) (*User, error) {
  var user User
  db := us.db.Where("id = ?", id)
  err := first(db, &user)
  if err != nil {
    return nil, err
  }
  return &user, nil
}

// ByEmail looks up a user with the given email address and returns
// that user. If the user is found, we will return a nil error
// If the user is not found, we will return ErrNotFound
// If there is another error, we will return an error with more
// information about what went wrong. This may not be
// an error generated by the models package.
func (us *UserService) ByEmail(email string) (*User, error) {
  var user User
  db := us.db.Where("email = ?", email)
  err := first(db, &user)
  return &user, err
}

// Update will update the provided user with all of the data
// in the provided user object.
func (us *UserService) Update(user *User) error {
  return us.db.Save(user).Error
}

// Delete will delete the user with the provided ID
func (us *UserService) Delete(id uint) error {
  if id == 0 {
    return ErrInvalidID
  }
  user := User{Model: gorm.Model{ID: id}}
  return us.db.Delete(&user).Error
}

// DestructiveReset drops the user table and rebuilds it
func (us *UserService) DestructiveReset() {
  err := us.db.DropTableIfExists(&User{})
  if err != nil {
    return err
  }
  return us.db.AutoMigrate()
}

// AutoMigrate will attempt to automatically migrate the users table
func (us *UserService) AutoMigrate() error {
  if err := us.db.AutoMigrate(&User{}).Error; err != nil {
    return err
  }
  return nil
}
